//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

EventTopic = {
'METRICS' : 0,
'INTERACTION' : 1,
'LIFECYCLE' : 2,
'SERVER' : 3
};
TSessionCounterEvent = function(args) {
  this.sessionId = '';
  this.time = null;
  this.key = null;
  this.value = null;
  this.adId = null;
  this.startTime = null;
  if (args) {
    if (args.sessionId !== undefined) {
      this.sessionId = args.sessionId;
    }
    if (args.time !== undefined) {
      this.time = args.time;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.adId !== undefined) {
      this.adId = args.adId;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
  }
};
TSessionCounterEvent.prototype = {};
TSessionCounterEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.time = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.value = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.adId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSessionCounterEvent.prototype.write = function(output) {
  output.writeStructBegin('TSessionCounterEvent');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I32, 2);
    output.writeI32(this.time);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 3);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I32, 4);
    output.writeI32(this.value);
    output.writeFieldEnd();
  }
  if (this.adId !== null && this.adId !== undefined) {
    output.writeFieldBegin('adId', Thrift.Type.STRING, 5);
    output.writeString(this.adId);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 6);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TSessionTimerEvent = function(args) {
  this.sessionId = '';
  this.time = null;
  this.key = null;
  this.value = null;
  this.adId = null;
  this.startTime = null;
  if (args) {
    if (args.sessionId !== undefined) {
      this.sessionId = args.sessionId;
    }
    if (args.time !== undefined) {
      this.time = args.time;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
    if (args.adId !== undefined) {
      this.adId = args.adId;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
  }
};
TSessionTimerEvent.prototype = {};
TSessionTimerEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.time = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.value = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.adId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TSessionTimerEvent.prototype.write = function(output) {
  output.writeStructBegin('TSessionTimerEvent');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I32, 2);
    output.writeI32(this.time);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 3);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.I32, 4);
    output.writeI32(this.value);
    output.writeFieldEnd();
  }
  if (this.adId !== null && this.adId !== undefined) {
    output.writeFieldBegin('adId', Thrift.Type.STRING, 5);
    output.writeString(this.adId);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 6);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TTouchUpEvent = function(args) {
  this.sessionId = '';
  this.time = null;
  this.x = null;
  this.y = null;
  this.adId = null;
  this.startTime = null;
  if (args) {
    if (args.sessionId !== undefined) {
      this.sessionId = args.sessionId;
    }
    if (args.time !== undefined) {
      this.time = args.time;
    }
    if (args.x !== undefined) {
      this.x = args.x;
    }
    if (args.y !== undefined) {
      this.y = args.y;
    }
    if (args.adId !== undefined) {
      this.adId = args.adId;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
  }
};
TTouchUpEvent.prototype = {};
TTouchUpEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.time = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.x = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.y = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.adId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTouchUpEvent.prototype.write = function(output) {
  output.writeStructBegin('TTouchUpEvent');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I32, 2);
    output.writeI32(this.time);
    output.writeFieldEnd();
  }
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.I32, 3);
    output.writeI32(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.I32, 4);
    output.writeI32(this.y);
    output.writeFieldEnd();
  }
  if (this.adId !== null && this.adId !== undefined) {
    output.writeFieldBegin('adId', Thrift.Type.STRING, 5);
    output.writeString(this.adId);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 6);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TTouchDownEvent = function(args) {
  this.sessionId = '';
  this.time = null;
  this.x = null;
  this.y = null;
  this.adId = null;
  this.startTime = null;
  if (args) {
    if (args.sessionId !== undefined) {
      this.sessionId = args.sessionId;
    }
    if (args.time !== undefined) {
      this.time = args.time;
    }
    if (args.x !== undefined) {
      this.x = args.x;
    }
    if (args.y !== undefined) {
      this.y = args.y;
    }
    if (args.adId !== undefined) {
      this.adId = args.adId;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
  }
};
TTouchDownEvent.prototype = {};
TTouchDownEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.time = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.x = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.y = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.adId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTouchDownEvent.prototype.write = function(output) {
  output.writeStructBegin('TTouchDownEvent');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I32, 2);
    output.writeI32(this.time);
    output.writeFieldEnd();
  }
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.I32, 3);
    output.writeI32(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.I32, 4);
    output.writeI32(this.y);
    output.writeFieldEnd();
  }
  if (this.adId !== null && this.adId !== undefined) {
    output.writeFieldBegin('adId', Thrift.Type.STRING, 5);
    output.writeString(this.adId);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 6);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

THoverEvent = function(args) {
  this.sessionId = '';
  this.time = null;
  this.x = null;
  this.y = null;
  this.adId = null;
  this.startTime = null;
  if (args) {
    if (args.sessionId !== undefined) {
      this.sessionId = args.sessionId;
    }
    if (args.time !== undefined) {
      this.time = args.time;
    }
    if (args.x !== undefined) {
      this.x = args.x;
    }
    if (args.y !== undefined) {
      this.y = args.y;
    }
    if (args.adId !== undefined) {
      this.adId = args.adId;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
  }
};
THoverEvent.prototype = {};
THoverEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.time = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.x = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.y = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.adId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

THoverEvent.prototype.write = function(output) {
  output.writeStructBegin('THoverEvent');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I32, 2);
    output.writeI32(this.time);
    output.writeFieldEnd();
  }
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.I32, 3);
    output.writeI32(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.I32, 4);
    output.writeI32(this.y);
    output.writeFieldEnd();
  }
  if (this.adId !== null && this.adId !== undefined) {
    output.writeFieldBegin('adId', Thrift.Type.STRING, 5);
    output.writeString(this.adId);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 6);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TImpressionEvent = function(args) {
  this.sessionId = '';
  this.adId = null;
  this.time = null;
  this.referer = null;
  this.useragent = null;
  this.key = null;
  this.startTime = null;
  if (args) {
    if (args.sessionId !== undefined) {
      this.sessionId = args.sessionId;
    }
    if (args.adId !== undefined) {
      this.adId = args.adId;
    }
    if (args.time !== undefined) {
      this.time = args.time;
    }
    if (args.referer !== undefined) {
      this.referer = args.referer;
    }
    if (args.useragent !== undefined) {
      this.useragent = args.useragent;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
  }
};
TImpressionEvent.prototype = {};
TImpressionEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.adId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.time = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.referer = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.useragent = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TImpressionEvent.prototype.write = function(output) {
  output.writeStructBegin('TImpressionEvent');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.adId !== null && this.adId !== undefined) {
    output.writeFieldBegin('adId', Thrift.Type.STRING, 2);
    output.writeString(this.adId);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I32, 3);
    output.writeI32(this.time);
    output.writeFieldEnd();
  }
  if (this.referer !== null && this.referer !== undefined) {
    output.writeFieldBegin('referer', Thrift.Type.STRING, 4);
    output.writeString(this.referer);
    output.writeFieldEnd();
  }
  if (this.useragent !== null && this.useragent !== undefined) {
    output.writeFieldBegin('useragent', Thrift.Type.STRING, 5);
    output.writeString(this.useragent);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 6);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 7);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TExitEvent = function(args) {
  this.sessionId = '';
  this.time = null;
  this.key = null;
  this.adId = null;
  this.startTime = null;
  this.referer = null;
  this.useragent = null;
  if (args) {
    if (args.sessionId !== undefined) {
      this.sessionId = args.sessionId;
    }
    if (args.time !== undefined) {
      this.time = args.time;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.adId !== undefined) {
      this.adId = args.adId;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.referer !== undefined) {
      this.referer = args.referer;
    }
    if (args.useragent !== undefined) {
      this.useragent = args.useragent;
    }
  }
};
TExitEvent.prototype = {};
TExitEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.time = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.adId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.referer = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.useragent = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TExitEvent.prototype.write = function(output) {
  output.writeStructBegin('TExitEvent');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I32, 2);
    output.writeI32(this.time);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 3);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.adId !== null && this.adId !== undefined) {
    output.writeFieldBegin('adId', Thrift.Type.STRING, 4);
    output.writeString(this.adId);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 5);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.referer !== null && this.referer !== undefined) {
    output.writeFieldBegin('referer', Thrift.Type.STRING, 6);
    output.writeString(this.referer);
    output.writeFieldEnd();
  }
  if (this.useragent !== null && this.useragent !== undefined) {
    output.writeFieldBegin('useragent', Thrift.Type.STRING, 7);
    output.writeString(this.useragent);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TExceptionEvent = function(args) {
  this.sessionId = '';
  this.timestamp = null;
  this.type = null;
  this.message = null;
  if (args) {
    if (args.sessionId !== undefined) {
      this.sessionId = args.sessionId;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
TExceptionEvent.prototype = {};
TExceptionEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TExceptionEvent.prototype.write = function(output) {
  output.writeStructBegin('TExceptionEvent');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 1);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 4);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

