//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

TAdStatus = {
'DESIGNING' : 0,
'REVIEWING' : 1,
'APPROVED' : 2,
'TRAFFIC_ON' : 3,
'TRAFFIC_OFF' : 4
};
TResource = function(args) {
  this.id = '';
  this.accId = null;
  this.mime = null;
  this.thumbnail = null;
  this.hash = null;
  this.size = null;
  this.url = null;
  this.key = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.accId !== undefined) {
      this.accId = args.accId;
    }
    if (args.mime !== undefined) {
      this.mime = args.mime;
    }
    if (args.thumbnail !== undefined) {
      this.thumbnail = args.thumbnail;
    }
    if (args.hash !== undefined) {
      this.hash = args.hash;
    }
    if (args.size !== undefined) {
      this.size = args.size;
    }
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
  }
};
TResource.prototype = {};
TResource.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.mime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.thumbnail = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.hash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.size = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TResource.prototype.write = function(output) {
  output.writeStructBegin('TResource');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.accId !== null && this.accId !== undefined) {
    output.writeFieldBegin('accId', Thrift.Type.STRING, 2);
    output.writeString(this.accId);
    output.writeFieldEnd();
  }
  if (this.mime !== null && this.mime !== undefined) {
    output.writeFieldBegin('mime', Thrift.Type.STRING, 3);
    output.writeString(this.mime);
    output.writeFieldEnd();
  }
  if (this.thumbnail !== null && this.thumbnail !== undefined) {
    output.writeFieldBegin('thumbnail', Thrift.Type.STRING, 4);
    output.writeString(this.thumbnail);
    output.writeFieldEnd();
  }
  if (this.hash !== null && this.hash !== undefined) {
    output.writeFieldBegin('hash', Thrift.Type.STRING, 5);
    output.writeString(this.hash);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I32, 6);
    output.writeI32(this.size);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 7);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 8);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCampaign = function(args) {
  this.id = '';
  this.accId = null;
  this.name = null;
  this.startTime = null;
  this.endTime = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.accId !== undefined) {
      this.accId = args.accId;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
  }
};
TCampaign.prototype = {};
TCampaign.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCampaign.prototype.write = function(output) {
  output.writeStructBegin('TCampaign');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.accId !== null && this.accId !== undefined) {
    output.writeFieldBegin('accId', Thrift.Type.STRING, 2);
    output.writeString(this.accId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 4);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 5);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAd = function(args) {
  this.id = '';
  this.accId = null;
  this.tcampaign = null;
  this.status = null;
  this.name = null;
  this.createTime = null;
  this.lastUpdated = null;
  this.url = null;
  this.backupImageUrl = null;
  this.backupClickThroughUrl = null;
  this.protocolVersion = null;
  this.buildName = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.accId !== undefined) {
      this.accId = args.accId;
    }
    if (args.tcampaign !== undefined) {
      this.tcampaign = args.tcampaign;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.lastUpdated !== undefined) {
      this.lastUpdated = args.lastUpdated;
    }
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.backupImageUrl !== undefined) {
      this.backupImageUrl = args.backupImageUrl;
    }
    if (args.backupClickThroughUrl !== undefined) {
      this.backupClickThroughUrl = args.backupClickThroughUrl;
    }
    if (args.protocolVersion !== undefined) {
      this.protocolVersion = args.protocolVersion;
    }
    if (args.buildName !== undefined) {
      this.buildName = args.buildName;
    }
  }
};
TAd.prototype = {};
TAd.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tcampaign = new TCampaign();
        this.tcampaign.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.lastUpdated = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.backupImageUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.backupClickThroughUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.protocolVersion = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.buildName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAd.prototype.write = function(output) {
  output.writeStructBegin('TAd');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.accId !== null && this.accId !== undefined) {
    output.writeFieldBegin('accId', Thrift.Type.STRING, 2);
    output.writeString(this.accId);
    output.writeFieldEnd();
  }
  if (this.tcampaign !== null && this.tcampaign !== undefined) {
    output.writeFieldBegin('tcampaign', Thrift.Type.STRUCT, 3);
    this.tcampaign.write(output);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 7);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  if (this.lastUpdated !== null && this.lastUpdated !== undefined) {
    output.writeFieldBegin('lastUpdated', Thrift.Type.I64, 8);
    output.writeI64(this.lastUpdated);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 9);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.backupImageUrl !== null && this.backupImageUrl !== undefined) {
    output.writeFieldBegin('backupImageUrl', Thrift.Type.STRING, 10);
    output.writeString(this.backupImageUrl);
    output.writeFieldEnd();
  }
  if (this.backupClickThroughUrl !== null && this.backupClickThroughUrl !== undefined) {
    output.writeFieldBegin('backupClickThroughUrl', Thrift.Type.STRING, 11);
    output.writeString(this.backupClickThroughUrl);
    output.writeFieldEnd();
  }
  if (this.protocolVersion !== null && this.protocolVersion !== undefined) {
    output.writeFieldBegin('protocolVersion', Thrift.Type.STRING, 12);
    output.writeString(this.protocolVersion);
    output.writeFieldEnd();
  }
  if (this.buildName !== null && this.buildName !== undefined) {
    output.writeFieldBegin('buildName', Thrift.Type.STRING, 13);
    output.writeString(this.buildName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TUploadPermission = function(args) {
  this.id = '';
  this.key = null;
  this.accessKeyId = null;
  this.acl = null;
  this.successActionRedirect = null;
  this.policy = null;
  this.signature = null;
  this.uploadUrl = null;
  this.url = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.key !== undefined) {
      this.key = args.key;
    }
    if (args.accessKeyId !== undefined) {
      this.accessKeyId = args.accessKeyId;
    }
    if (args.acl !== undefined) {
      this.acl = args.acl;
    }
    if (args.successActionRedirect !== undefined) {
      this.successActionRedirect = args.successActionRedirect;
    }
    if (args.policy !== undefined) {
      this.policy = args.policy;
    }
    if (args.signature !== undefined) {
      this.signature = args.signature;
    }
    if (args.uploadUrl !== undefined) {
      this.uploadUrl = args.uploadUrl;
    }
    if (args.url !== undefined) {
      this.url = args.url;
    }
  }
};
TUploadPermission.prototype = {};
TUploadPermission.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.accessKeyId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.acl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.successActionRedirect = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.policy = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.uploadUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TUploadPermission.prototype.write = function(output) {
  output.writeStructBegin('TUploadPermission');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.accessKeyId !== null && this.accessKeyId !== undefined) {
    output.writeFieldBegin('accessKeyId', Thrift.Type.STRING, 3);
    output.writeString(this.accessKeyId);
    output.writeFieldEnd();
  }
  if (this.acl !== null && this.acl !== undefined) {
    output.writeFieldBegin('acl', Thrift.Type.STRING, 4);
    output.writeString(this.acl);
    output.writeFieldEnd();
  }
  if (this.successActionRedirect !== null && this.successActionRedirect !== undefined) {
    output.writeFieldBegin('successActionRedirect', Thrift.Type.STRING, 5);
    output.writeString(this.successActionRedirect);
    output.writeFieldEnd();
  }
  if (this.policy !== null && this.policy !== undefined) {
    output.writeFieldBegin('policy', Thrift.Type.STRING, 6);
    output.writeString(this.policy);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 7);
    output.writeString(this.signature);
    output.writeFieldEnd();
  }
  if (this.uploadUrl !== null && this.uploadUrl !== undefined) {
    output.writeFieldBegin('uploadUrl', Thrift.Type.STRING, 8);
    output.writeString(this.uploadUrl);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 9);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

