//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

AdManager_createAccount_args = function(args) {
  this.account = null;
  if (args) {
    if (args.account !== undefined) {
      this.account = args.account;
    }
  }
};
AdManager_createAccount_args.prototype = {};
AdManager_createAccount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.account = new TAccount();
        this.account.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_createAccount_args.prototype.write = function(output) {
  output.writeStructBegin('AdManager_createAccount_args');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRUCT, 1);
    this.account.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_createAccount_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TUsernameUnavailableException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AdManager_createAccount_result.prototype = {};
AdManager_createAccount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TUsernameUnavailableException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_createAccount_result.prototype.write = function(output) {
  output.writeStructBegin('AdManager_createAccount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_login_args = function(args) {
  this.username = null;
  this.password = null;
  if (args) {
    if (args.username !== undefined) {
      this.username = args.username;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
  }
};
AdManager_login_args.prototype = {};
AdManager_login_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_login_args.prototype.write = function(output) {
  output.writeStructBegin('AdManager_login_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_login_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TUserNotAuthorizedException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AdManager_login_result.prototype = {};
AdManager_login_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TUserNotAuthorizedException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_login_result.prototype.write = function(output) {
  output.writeStructBegin('AdManager_login_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_changePassword_args = function(args) {
  this.userId = null;
  this.newPW = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.newPW !== undefined) {
      this.newPW = args.newPW;
    }
  }
};
AdManager_changePassword_args.prototype = {};
AdManager_changePassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.newPW = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_changePassword_args.prototype.write = function(output) {
  output.writeStructBegin('AdManager_changePassword_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.newPW !== null && this.newPW !== undefined) {
    output.writeFieldBegin('newPW', Thrift.Type.STRING, 2);
    output.writeString(this.newPW);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_changePassword_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AdManager_changePassword_result.prototype = {};
AdManager_changePassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_changePassword_result.prototype.write = function(output) {
  output.writeStructBegin('AdManager_changePassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_removeAccount_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
AdManager_removeAccount_args.prototype = {};
AdManager_removeAccount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_removeAccount_args.prototype.write = function(output) {
  output.writeStructBegin('AdManager_removeAccount_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_removeAccount_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TObjectNotFoundException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AdManager_removeAccount_result.prototype = {};
AdManager_removeAccount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TObjectNotFoundException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_removeAccount_result.prototype.write = function(output) {
  output.writeStructBegin('AdManager_removeAccount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_createUser_args = function(args) {
  this.userId = null;
  this.user = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
  }
};
AdManager_createUser_args.prototype = {};
AdManager_createUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new TUser();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_createUser_args.prototype.write = function(output) {
  output.writeStructBegin('AdManager_createUser_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 2);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_createUser_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TObjectNotFoundException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AdManager_createUser_result.prototype = {};
AdManager_createUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TObjectNotFoundException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_createUser_result.prototype.write = function(output) {
  output.writeStructBegin('AdManager_createUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_removeUser_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
AdManager_removeUser_args.prototype = {};
AdManager_removeUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_removeUser_args.prototype.write = function(output) {
  output.writeStructBegin('AdManager_removeUser_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_removeUser_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AdManager_removeUser_result.prototype = {};
AdManager_removeUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_removeUser_result.prototype.write = function(output) {
  output.writeStructBegin('AdManager_removeUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_saveResource_args = function(args) {
  this.userId = null;
  this.resource = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.resource !== undefined) {
      this.resource = args.resource;
    }
  }
};
AdManager_saveResource_args.prototype = {};
AdManager_saveResource_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.resource = new TResource();
        this.resource.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_saveResource_args.prototype.write = function(output) {
  output.writeStructBegin('AdManager_saveResource_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.resource !== null && this.resource !== undefined) {
    output.writeFieldBegin('resource', Thrift.Type.STRUCT, 2);
    this.resource.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_saveResource_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TObjectNotFoundException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AdManager_saveResource_result.prototype = {};
AdManager_saveResource_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TUploadPermission();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TObjectNotFoundException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_saveResource_result.prototype.write = function(output) {
  output.writeStructBegin('AdManager_saveResource_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_listThumbnails_args = function(args) {
  this.userId = null;
  this.accId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.accId !== undefined) {
      this.accId = args.accId;
    }
  }
};
AdManager_listThumbnails_args.prototype = {};
AdManager_listThumbnails_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.accId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_listThumbnails_args.prototype.write = function(output) {
  output.writeStructBegin('AdManager_listThumbnails_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.accId !== null && this.accId !== undefined) {
    output.writeFieldBegin('accId', Thrift.Type.STRING, 2);
    output.writeString(this.accId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_listThumbnails_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AdManager_listThumbnails_result.prototype = {};
AdManager_listThumbnails_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new TResource();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_listThumbnails_result.prototype.write = function(output) {
  output.writeStructBegin('AdManager_listThumbnails_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_retrieveResource_args = function(args) {
  this.userId = null;
  this.rcId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.rcId !== undefined) {
      this.rcId = args.rcId;
    }
  }
};
AdManager_retrieveResource_args.prototype = {};
AdManager_retrieveResource_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.rcId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_retrieveResource_args.prototype.write = function(output) {
  output.writeStructBegin('AdManager_retrieveResource_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.rcId !== null && this.rcId !== undefined) {
    output.writeFieldBegin('rcId', Thrift.Type.STRING, 2);
    output.writeString(this.rcId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_retrieveResource_result = function(args) {
  this.success = null;
  this.e = null;
  this.eTwo = null;
  if (args instanceof TObjectNotFoundException) {
    this.e = args;
    return;
  }
  if (args instanceof TUserNotAuthorizedException) {
    this.eTwo = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
    if (args.eTwo !== undefined) {
      this.eTwo = args.eTwo;
    }
  }
};
AdManager_retrieveResource_result.prototype = {};
AdManager_retrieveResource_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TResource();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TObjectNotFoundException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.eTwo = new TUserNotAuthorizedException();
        this.eTwo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_retrieveResource_result.prototype.write = function(output) {
  output.writeStructBegin('AdManager_retrieveResource_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.eTwo !== null && this.eTwo !== undefined) {
    output.writeFieldBegin('eTwo', Thrift.Type.STRUCT, 2);
    this.eTwo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_removeResource_args = function(args) {
  this.userId = null;
  this.rcId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.rcId !== undefined) {
      this.rcId = args.rcId;
    }
  }
};
AdManager_removeResource_args.prototype = {};
AdManager_removeResource_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.rcId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_removeResource_args.prototype.write = function(output) {
  output.writeStructBegin('AdManager_removeResource_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.rcId !== null && this.rcId !== undefined) {
    output.writeFieldBegin('rcId', Thrift.Type.STRING, 2);
    output.writeString(this.rcId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_removeResource_result = function(args) {
  this.success = null;
  this.e = null;
  this.eTwo = null;
  if (args instanceof TObjectNotFoundException) {
    this.e = args;
    return;
  }
  if (args instanceof TUserNotAuthorizedException) {
    this.eTwo = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
    if (args.eTwo !== undefined) {
      this.eTwo = args.eTwo;
    }
  }
};
AdManager_removeResource_result.prototype = {};
AdManager_removeResource_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TObjectNotFoundException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.eTwo = new TUserNotAuthorizedException();
        this.eTwo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_removeResource_result.prototype.write = function(output) {
  output.writeStructBegin('AdManager_removeResource_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.eTwo !== null && this.eTwo !== undefined) {
    output.writeFieldBegin('eTwo', Thrift.Type.STRUCT, 2);
    this.eTwo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_saveCampaign_args = function(args) {
  this.userId = null;
  this.campaign = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.campaign !== undefined) {
      this.campaign = args.campaign;
    }
  }
};
AdManager_saveCampaign_args.prototype = {};
AdManager_saveCampaign_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.campaign = new TCampaign();
        this.campaign.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_saveCampaign_args.prototype.write = function(output) {
  output.writeStructBegin('AdManager_saveCampaign_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.campaign !== null && this.campaign !== undefined) {
    output.writeFieldBegin('campaign', Thrift.Type.STRUCT, 2);
    this.campaign.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_saveCampaign_result = function(args) {
  this.success = null;
  this.e = null;
  this.eTwo = null;
  if (args instanceof TUserNotAuthorizedException) {
    this.e = args;
    return;
  }
  if (args instanceof TObjectNotFoundException) {
    this.eTwo = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
    if (args.eTwo !== undefined) {
      this.eTwo = args.eTwo;
    }
  }
};
AdManager_saveCampaign_result.prototype = {};
AdManager_saveCampaign_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TUserNotAuthorizedException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.eTwo = new TObjectNotFoundException();
        this.eTwo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_saveCampaign_result.prototype.write = function(output) {
  output.writeStructBegin('AdManager_saveCampaign_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.eTwo !== null && this.eTwo !== undefined) {
    output.writeFieldBegin('eTwo', Thrift.Type.STRUCT, 2);
    this.eTwo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_updateCampaign_args = function(args) {
  this.userId = null;
  this.campaign = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.campaign !== undefined) {
      this.campaign = args.campaign;
    }
  }
};
AdManager_updateCampaign_args.prototype = {};
AdManager_updateCampaign_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.campaign = new TCampaign();
        this.campaign.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_updateCampaign_args.prototype.write = function(output) {
  output.writeStructBegin('AdManager_updateCampaign_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.campaign !== null && this.campaign !== undefined) {
    output.writeFieldBegin('campaign', Thrift.Type.STRUCT, 2);
    this.campaign.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_updateCampaign_result = function(args) {
  this.success = null;
  this.e = null;
  this.eTwo = null;
  if (args instanceof TUserNotAuthorizedException) {
    this.e = args;
    return;
  }
  if (args instanceof TObjectNotFoundException) {
    this.eTwo = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
    if (args.eTwo !== undefined) {
      this.eTwo = args.eTwo;
    }
  }
};
AdManager_updateCampaign_result.prototype = {};
AdManager_updateCampaign_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TUserNotAuthorizedException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.eTwo = new TObjectNotFoundException();
        this.eTwo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_updateCampaign_result.prototype.write = function(output) {
  output.writeStructBegin('AdManager_updateCampaign_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.eTwo !== null && this.eTwo !== undefined) {
    output.writeFieldBegin('eTwo', Thrift.Type.STRUCT, 2);
    this.eTwo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_retrieveCampaign_args = function(args) {
  this.userId = null;
  this.campaignId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.campaignId !== undefined) {
      this.campaignId = args.campaignId;
    }
  }
};
AdManager_retrieveCampaign_args.prototype = {};
AdManager_retrieveCampaign_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.campaignId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_retrieveCampaign_args.prototype.write = function(output) {
  output.writeStructBegin('AdManager_retrieveCampaign_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.campaignId !== null && this.campaignId !== undefined) {
    output.writeFieldBegin('campaignId', Thrift.Type.STRING, 2);
    output.writeString(this.campaignId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_retrieveCampaign_result = function(args) {
  this.success = null;
  this.e = null;
  this.eTwo = null;
  if (args instanceof TObjectNotFoundException) {
    this.e = args;
    return;
  }
  if (args instanceof TUserNotAuthorizedException) {
    this.eTwo = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
    if (args.eTwo !== undefined) {
      this.eTwo = args.eTwo;
    }
  }
};
AdManager_retrieveCampaign_result.prototype = {};
AdManager_retrieveCampaign_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TCampaign();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TObjectNotFoundException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.eTwo = new TUserNotAuthorizedException();
        this.eTwo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_retrieveCampaign_result.prototype.write = function(output) {
  output.writeStructBegin('AdManager_retrieveCampaign_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.eTwo !== null && this.eTwo !== undefined) {
    output.writeFieldBegin('eTwo', Thrift.Type.STRUCT, 2);
    this.eTwo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_removeCampaign_args = function(args) {
  this.userId = null;
  this.campaignId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.campaignId !== undefined) {
      this.campaignId = args.campaignId;
    }
  }
};
AdManager_removeCampaign_args.prototype = {};
AdManager_removeCampaign_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.campaignId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_removeCampaign_args.prototype.write = function(output) {
  output.writeStructBegin('AdManager_removeCampaign_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.campaignId !== null && this.campaignId !== undefined) {
    output.writeFieldBegin('campaignId', Thrift.Type.STRING, 2);
    output.writeString(this.campaignId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_removeCampaign_result = function(args) {
  this.success = null;
  this.e = null;
  this.eTwo = null;
  if (args instanceof TObjectNotFoundException) {
    this.e = args;
    return;
  }
  if (args instanceof TUserNotAuthorizedException) {
    this.eTwo = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
    if (args.eTwo !== undefined) {
      this.eTwo = args.eTwo;
    }
  }
};
AdManager_removeCampaign_result.prototype = {};
AdManager_removeCampaign_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TObjectNotFoundException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.eTwo = new TUserNotAuthorizedException();
        this.eTwo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_removeCampaign_result.prototype.write = function(output) {
  output.writeStructBegin('AdManager_removeCampaign_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.eTwo !== null && this.eTwo !== undefined) {
    output.writeFieldBegin('eTwo', Thrift.Type.STRUCT, 2);
    this.eTwo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_listCampaigns_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
AdManager_listCampaigns_args.prototype = {};
AdManager_listCampaigns_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_listCampaigns_args.prototype.write = function(output) {
  output.writeStructBegin('AdManager_listCampaigns_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_listCampaigns_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TObjectNotFoundException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AdManager_listCampaigns_result.prototype = {};
AdManager_listCampaigns_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new TCampaign();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TObjectNotFoundException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_listCampaigns_result.prototype.write = function(output) {
  output.writeStructBegin('AdManager_listCampaigns_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_saveAd_args = function(args) {
  this.userId = null;
  this.ad = null;
  this.campId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.ad !== undefined) {
      this.ad = args.ad;
    }
    if (args.campId !== undefined) {
      this.campId = args.campId;
    }
  }
};
AdManager_saveAd_args.prototype = {};
AdManager_saveAd_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ad = new TAd();
        this.ad.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.campId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_saveAd_args.prototype.write = function(output) {
  output.writeStructBegin('AdManager_saveAd_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.ad !== null && this.ad !== undefined) {
    output.writeFieldBegin('ad', Thrift.Type.STRUCT, 2);
    this.ad.write(output);
    output.writeFieldEnd();
  }
  if (this.campId !== null && this.campId !== undefined) {
    output.writeFieldBegin('campId', Thrift.Type.STRING, 3);
    output.writeString(this.campId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_saveAd_result = function(args) {
  this.success = null;
  this.e = null;
  this.eTwo = null;
  this.eThree = null;
  if (args instanceof TUserNotAuthorizedException) {
    this.e = args;
    return;
  }
  if (args instanceof TOperationNotCompletedException) {
    this.eTwo = args;
    return;
  }
  if (args instanceof TObjectNotFoundException) {
    this.eThree = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
    if (args.eTwo !== undefined) {
      this.eTwo = args.eTwo;
    }
    if (args.eThree !== undefined) {
      this.eThree = args.eThree;
    }
  }
};
AdManager_saveAd_result.prototype = {};
AdManager_saveAd_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TUploadPermission();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TUserNotAuthorizedException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.eTwo = new TOperationNotCompletedException();
        this.eTwo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.eThree = new TObjectNotFoundException();
        this.eThree.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_saveAd_result.prototype.write = function(output) {
  output.writeStructBegin('AdManager_saveAd_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.eTwo !== null && this.eTwo !== undefined) {
    output.writeFieldBegin('eTwo', Thrift.Type.STRUCT, 2);
    this.eTwo.write(output);
    output.writeFieldEnd();
  }
  if (this.eThree !== null && this.eThree !== undefined) {
    output.writeFieldBegin('eThree', Thrift.Type.STRUCT, 3);
    this.eThree.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_retrieveAd_args = function(args) {
  this.userId = null;
  this.adId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.adId !== undefined) {
      this.adId = args.adId;
    }
  }
};
AdManager_retrieveAd_args.prototype = {};
AdManager_retrieveAd_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.adId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_retrieveAd_args.prototype.write = function(output) {
  output.writeStructBegin('AdManager_retrieveAd_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.adId !== null && this.adId !== undefined) {
    output.writeFieldBegin('adId', Thrift.Type.STRING, 2);
    output.writeString(this.adId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_retrieveAd_result = function(args) {
  this.success = null;
  this.e = null;
  this.eTwo = null;
  if (args instanceof TObjectNotFoundException) {
    this.e = args;
    return;
  }
  if (args instanceof TUserNotAuthorizedException) {
    this.eTwo = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
    if (args.eTwo !== undefined) {
      this.eTwo = args.eTwo;
    }
  }
};
AdManager_retrieveAd_result.prototype = {};
AdManager_retrieveAd_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TAd();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TObjectNotFoundException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.eTwo = new TUserNotAuthorizedException();
        this.eTwo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_retrieveAd_result.prototype.write = function(output) {
  output.writeStructBegin('AdManager_retrieveAd_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.eTwo !== null && this.eTwo !== undefined) {
    output.writeFieldBegin('eTwo', Thrift.Type.STRUCT, 2);
    this.eTwo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_removeAd_args = function(args) {
  this.userId = null;
  this.adId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.adId !== undefined) {
      this.adId = args.adId;
    }
  }
};
AdManager_removeAd_args.prototype = {};
AdManager_removeAd_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.adId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_removeAd_args.prototype.write = function(output) {
  output.writeStructBegin('AdManager_removeAd_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.adId !== null && this.adId !== undefined) {
    output.writeFieldBegin('adId', Thrift.Type.STRING, 2);
    output.writeString(this.adId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_removeAd_result = function(args) {
  this.success = null;
  this.e = null;
  this.eTwo = null;
  if (args instanceof TObjectNotFoundException) {
    this.e = args;
    return;
  }
  if (args instanceof TUserNotAuthorizedException) {
    this.eTwo = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
    if (args.eTwo !== undefined) {
      this.eTwo = args.eTwo;
    }
  }
};
AdManager_removeAd_result.prototype = {};
AdManager_removeAd_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TObjectNotFoundException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.eTwo = new TUserNotAuthorizedException();
        this.eTwo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_removeAd_result.prototype.write = function(output) {
  output.writeStructBegin('AdManager_removeAd_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.eTwo !== null && this.eTwo !== undefined) {
    output.writeFieldBegin('eTwo', Thrift.Type.STRUCT, 2);
    this.eTwo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_listAds_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
  }
};
AdManager_listAds_args.prototype = {};
AdManager_listAds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_listAds_args.prototype.write = function(output) {
  output.writeStructBegin('AdManager_listAds_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_listAds_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TObjectNotFoundException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AdManager_listAds_result.prototype = {};
AdManager_listAds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new TAd();
          elem22.read(input);
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TObjectNotFoundException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_listAds_result.prototype.write = function(output) {
  output.writeStructBegin('AdManager_listAds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_listAdsByCampaign_args = function(args) {
  this.userId = null;
  this.campaignId = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.campaignId !== undefined) {
      this.campaignId = args.campaignId;
    }
  }
};
AdManager_listAdsByCampaign_args.prototype = {};
AdManager_listAdsByCampaign_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.campaignId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_listAdsByCampaign_args.prototype.write = function(output) {
  output.writeStructBegin('AdManager_listAdsByCampaign_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.campaignId !== null && this.campaignId !== undefined) {
    output.writeFieldBegin('campaignId', Thrift.Type.STRING, 2);
    output.writeString(this.campaignId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_listAdsByCampaign_result = function(args) {
  this.success = null;
  this.e = null;
  this.eTwo = null;
  if (args instanceof TObjectNotFoundException) {
    this.e = args;
    return;
  }
  if (args instanceof TUserNotAuthorizedException) {
    this.eTwo = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
    if (args.eTwo !== undefined) {
      this.eTwo = args.eTwo;
    }
  }
};
AdManager_listAdsByCampaign_result.prototype = {};
AdManager_listAdsByCampaign_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.success = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new TAd();
          elem30.read(input);
          this.success.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TObjectNotFoundException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.eTwo = new TUserNotAuthorizedException();
        this.eTwo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_listAdsByCampaign_result.prototype.write = function(output) {
  output.writeStructBegin('AdManager_listAdsByCampaign_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter31 in this.success)
    {
      if (this.success.hasOwnProperty(iter31))
      {
        iter31 = this.success[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  if (this.eTwo !== null && this.eTwo !== undefined) {
    output.writeFieldBegin('eTwo', Thrift.Type.STRUCT, 2);
    this.eTwo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_publishAd_args = function(args) {
  this.userId = null;
  this.ad = null;
  if (args) {
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.ad !== undefined) {
      this.ad = args.ad;
    }
  }
};
AdManager_publishAd_args.prototype = {};
AdManager_publishAd_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ad = new TAd();
        this.ad.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_publishAd_args.prototype.write = function(output) {
  output.writeStructBegin('AdManager_publishAd_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.ad !== null && this.ad !== undefined) {
    output.writeFieldBegin('ad', Thrift.Type.STRUCT, 2);
    this.ad.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManager_publishAd_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof TObjectNotFoundException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
AdManager_publishAd_result.prototype = {};
AdManager_publishAd_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new TObjectNotFoundException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdManager_publishAd_result.prototype.write = function(output) {
  output.writeStructBegin('AdManager_publishAd_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdManagerClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
AdManagerClient.prototype = {};
AdManagerClient.prototype.createAccount = function(account) {
  this.send_createAccount(account);
  return this.recv_createAccount();
};

AdManagerClient.prototype.send_createAccount = function(account) {
  this.output.writeMessageBegin('createAccount', Thrift.MessageType.CALL, this.seqid);
  var args = new AdManager_createAccount_args();
  args.account = account;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AdManagerClient.prototype.recv_createAccount = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdManager_createAccount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createAccount failed: unknown result';
};
AdManagerClient.prototype.login = function(username, password) {
  this.send_login(username, password);
  return this.recv_login();
};

AdManagerClient.prototype.send_login = function(username, password) {
  this.output.writeMessageBegin('login', Thrift.MessageType.CALL, this.seqid);
  var args = new AdManager_login_args();
  args.username = username;
  args.password = password;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AdManagerClient.prototype.recv_login = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdManager_login_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'login failed: unknown result';
};
AdManagerClient.prototype.changePassword = function(userId, newPW) {
  this.send_changePassword(userId, newPW);
  return this.recv_changePassword();
};

AdManagerClient.prototype.send_changePassword = function(userId, newPW) {
  this.output.writeMessageBegin('changePassword', Thrift.MessageType.CALL, this.seqid);
  var args = new AdManager_changePassword_args();
  args.userId = userId;
  args.newPW = newPW;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AdManagerClient.prototype.recv_changePassword = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdManager_changePassword_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'changePassword failed: unknown result';
};
AdManagerClient.prototype.removeAccount = function(userId) {
  this.send_removeAccount(userId);
  return this.recv_removeAccount();
};

AdManagerClient.prototype.send_removeAccount = function(userId) {
  this.output.writeMessageBegin('removeAccount', Thrift.MessageType.CALL, this.seqid);
  var args = new AdManager_removeAccount_args();
  args.userId = userId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AdManagerClient.prototype.recv_removeAccount = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdManager_removeAccount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeAccount failed: unknown result';
};
AdManagerClient.prototype.createUser = function(userId, user) {
  this.send_createUser(userId, user);
  return this.recv_createUser();
};

AdManagerClient.prototype.send_createUser = function(userId, user) {
  this.output.writeMessageBegin('createUser', Thrift.MessageType.CALL, this.seqid);
  var args = new AdManager_createUser_args();
  args.userId = userId;
  args.user = user;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AdManagerClient.prototype.recv_createUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdManager_createUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'createUser failed: unknown result';
};
AdManagerClient.prototype.removeUser = function(userId) {
  this.send_removeUser(userId);
  return this.recv_removeUser();
};

AdManagerClient.prototype.send_removeUser = function(userId) {
  this.output.writeMessageBegin('removeUser', Thrift.MessageType.CALL, this.seqid);
  var args = new AdManager_removeUser_args();
  args.userId = userId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AdManagerClient.prototype.recv_removeUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdManager_removeUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'removeUser failed: unknown result';
};
AdManagerClient.prototype.saveResource = function(userId, resource) {
  this.send_saveResource(userId, resource);
  return this.recv_saveResource();
};

AdManagerClient.prototype.send_saveResource = function(userId, resource) {
  this.output.writeMessageBegin('saveResource', Thrift.MessageType.CALL, this.seqid);
  var args = new AdManager_saveResource_args();
  args.userId = userId;
  args.resource = resource;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AdManagerClient.prototype.recv_saveResource = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdManager_saveResource_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'saveResource failed: unknown result';
};
AdManagerClient.prototype.listThumbnails = function(userId, accId) {
  this.send_listThumbnails(userId, accId);
  return this.recv_listThumbnails();
};

AdManagerClient.prototype.send_listThumbnails = function(userId, accId) {
  this.output.writeMessageBegin('listThumbnails', Thrift.MessageType.CALL, this.seqid);
  var args = new AdManager_listThumbnails_args();
  args.userId = userId;
  args.accId = accId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AdManagerClient.prototype.recv_listThumbnails = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdManager_listThumbnails_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'listThumbnails failed: unknown result';
};
AdManagerClient.prototype.retrieveResource = function(userId, rcId) {
  this.send_retrieveResource(userId, rcId);
  return this.recv_retrieveResource();
};

AdManagerClient.prototype.send_retrieveResource = function(userId, rcId) {
  this.output.writeMessageBegin('retrieveResource', Thrift.MessageType.CALL, this.seqid);
  var args = new AdManager_retrieveResource_args();
  args.userId = userId;
  args.rcId = rcId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AdManagerClient.prototype.recv_retrieveResource = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdManager_retrieveResource_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.eTwo) {
    throw result.eTwo;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'retrieveResource failed: unknown result';
};
AdManagerClient.prototype.removeResource = function(userId, rcId) {
  this.send_removeResource(userId, rcId);
  return this.recv_removeResource();
};

AdManagerClient.prototype.send_removeResource = function(userId, rcId) {
  this.output.writeMessageBegin('removeResource', Thrift.MessageType.CALL, this.seqid);
  var args = new AdManager_removeResource_args();
  args.userId = userId;
  args.rcId = rcId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AdManagerClient.prototype.recv_removeResource = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdManager_removeResource_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.eTwo) {
    throw result.eTwo;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeResource failed: unknown result';
};
AdManagerClient.prototype.saveCampaign = function(userId, campaign) {
  this.send_saveCampaign(userId, campaign);
  return this.recv_saveCampaign();
};

AdManagerClient.prototype.send_saveCampaign = function(userId, campaign) {
  this.output.writeMessageBegin('saveCampaign', Thrift.MessageType.CALL, this.seqid);
  var args = new AdManager_saveCampaign_args();
  args.userId = userId;
  args.campaign = campaign;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AdManagerClient.prototype.recv_saveCampaign = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdManager_saveCampaign_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.eTwo) {
    throw result.eTwo;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'saveCampaign failed: unknown result';
};
AdManagerClient.prototype.updateCampaign = function(userId, campaign) {
  this.send_updateCampaign(userId, campaign);
  return this.recv_updateCampaign();
};

AdManagerClient.prototype.send_updateCampaign = function(userId, campaign) {
  this.output.writeMessageBegin('updateCampaign', Thrift.MessageType.CALL, this.seqid);
  var args = new AdManager_updateCampaign_args();
  args.userId = userId;
  args.campaign = campaign;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AdManagerClient.prototype.recv_updateCampaign = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdManager_updateCampaign_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.eTwo) {
    throw result.eTwo;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'updateCampaign failed: unknown result';
};
AdManagerClient.prototype.retrieveCampaign = function(userId, campaignId) {
  this.send_retrieveCampaign(userId, campaignId);
  return this.recv_retrieveCampaign();
};

AdManagerClient.prototype.send_retrieveCampaign = function(userId, campaignId) {
  this.output.writeMessageBegin('retrieveCampaign', Thrift.MessageType.CALL, this.seqid);
  var args = new AdManager_retrieveCampaign_args();
  args.userId = userId;
  args.campaignId = campaignId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AdManagerClient.prototype.recv_retrieveCampaign = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdManager_retrieveCampaign_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.eTwo) {
    throw result.eTwo;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'retrieveCampaign failed: unknown result';
};
AdManagerClient.prototype.removeCampaign = function(userId, campaignId) {
  this.send_removeCampaign(userId, campaignId);
  return this.recv_removeCampaign();
};

AdManagerClient.prototype.send_removeCampaign = function(userId, campaignId) {
  this.output.writeMessageBegin('removeCampaign', Thrift.MessageType.CALL, this.seqid);
  var args = new AdManager_removeCampaign_args();
  args.userId = userId;
  args.campaignId = campaignId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AdManagerClient.prototype.recv_removeCampaign = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdManager_removeCampaign_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.eTwo) {
    throw result.eTwo;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeCampaign failed: unknown result';
};
AdManagerClient.prototype.listCampaigns = function(userId) {
  this.send_listCampaigns(userId);
  return this.recv_listCampaigns();
};

AdManagerClient.prototype.send_listCampaigns = function(userId) {
  this.output.writeMessageBegin('listCampaigns', Thrift.MessageType.CALL, this.seqid);
  var args = new AdManager_listCampaigns_args();
  args.userId = userId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AdManagerClient.prototype.recv_listCampaigns = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdManager_listCampaigns_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listCampaigns failed: unknown result';
};
AdManagerClient.prototype.saveAd = function(userId, ad, campId) {
  this.send_saveAd(userId, ad, campId);
  return this.recv_saveAd();
};

AdManagerClient.prototype.send_saveAd = function(userId, ad, campId) {
  this.output.writeMessageBegin('saveAd', Thrift.MessageType.CALL, this.seqid);
  var args = new AdManager_saveAd_args();
  args.userId = userId;
  args.ad = ad;
  args.campId = campId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AdManagerClient.prototype.recv_saveAd = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdManager_saveAd_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.eTwo) {
    throw result.eTwo;
  }
  if (null !== result.eThree) {
    throw result.eThree;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'saveAd failed: unknown result';
};
AdManagerClient.prototype.retrieveAd = function(userId, adId) {
  this.send_retrieveAd(userId, adId);
  return this.recv_retrieveAd();
};

AdManagerClient.prototype.send_retrieveAd = function(userId, adId) {
  this.output.writeMessageBegin('retrieveAd', Thrift.MessageType.CALL, this.seqid);
  var args = new AdManager_retrieveAd_args();
  args.userId = userId;
  args.adId = adId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AdManagerClient.prototype.recv_retrieveAd = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdManager_retrieveAd_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.eTwo) {
    throw result.eTwo;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'retrieveAd failed: unknown result';
};
AdManagerClient.prototype.removeAd = function(userId, adId) {
  this.send_removeAd(userId, adId);
  return this.recv_removeAd();
};

AdManagerClient.prototype.send_removeAd = function(userId, adId) {
  this.output.writeMessageBegin('removeAd', Thrift.MessageType.CALL, this.seqid);
  var args = new AdManager_removeAd_args();
  args.userId = userId;
  args.adId = adId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AdManagerClient.prototype.recv_removeAd = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdManager_removeAd_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.eTwo) {
    throw result.eTwo;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'removeAd failed: unknown result';
};
AdManagerClient.prototype.listAds = function(userId) {
  this.send_listAds(userId);
  return this.recv_listAds();
};

AdManagerClient.prototype.send_listAds = function(userId) {
  this.output.writeMessageBegin('listAds', Thrift.MessageType.CALL, this.seqid);
  var args = new AdManager_listAds_args();
  args.userId = userId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AdManagerClient.prototype.recv_listAds = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdManager_listAds_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listAds failed: unknown result';
};
AdManagerClient.prototype.listAdsByCampaign = function(userId, campaignId) {
  this.send_listAdsByCampaign(userId, campaignId);
  return this.recv_listAdsByCampaign();
};

AdManagerClient.prototype.send_listAdsByCampaign = function(userId, campaignId) {
  this.output.writeMessageBegin('listAdsByCampaign', Thrift.MessageType.CALL, this.seqid);
  var args = new AdManager_listAdsByCampaign_args();
  args.userId = userId;
  args.campaignId = campaignId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AdManagerClient.prototype.recv_listAdsByCampaign = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdManager_listAdsByCampaign_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.eTwo) {
    throw result.eTwo;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'listAdsByCampaign failed: unknown result';
};
AdManagerClient.prototype.publishAd = function(userId, ad) {
  this.send_publishAd(userId, ad);
  return this.recv_publishAd();
};

AdManagerClient.prototype.send_publishAd = function(userId, ad) {
  this.output.writeMessageBegin('publishAd', Thrift.MessageType.CALL, this.seqid);
  var args = new AdManager_publishAd_args();
  args.userId = userId;
  args.ad = ad;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

AdManagerClient.prototype.recv_publishAd = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AdManager_publishAd_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'publishAd failed: unknown result';
};
